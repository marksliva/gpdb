# frozen_string_literal: true

Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/bionic64"

  # Make it so that network access from the vagrant guest is able to
  # use SSH private keys that are present on the host without copying
  # them into the VM.
  config.ssh.forward_agent = true

  config.vm.hostname = 'gpdbvagrant'

  config.vm.provider :virtualbox do |vb|
    vb.customize [:modifyvm, :id, '--memory', 4096]
    cpu_count = 2

    # Determine the available cores in host system.
    # This mostly helps on linux, but it couldn't hurt on MacOSX.
    if RUBY_PLATFORM.match?(/linux/)
      cpu_count = `nproc`.to_i
    elsif RUBY_PLATFORM.match?(/darwin/)
      cpu_count = `sysctl -n hw.ncpu`.to_i
    end

    # Assign additional cores to the guest OS.
    vb.customize [:modifyvm, :id, '--cpus', cpu_count]
    vb.customize [:modifyvm, :id, '--cpuexecutioncap', '50']
    vb.customize [:modifyvm, :id, '--ioapic', 'on']

    # This setting makes it so that network access from inside the
    # vagrant guest is able to resolve DNS using the hosts VPN connection.
    vb.customize [:modifyvm, :id, '--natdnshostresolver1', 'on']
  end

  config.vm.define(:multi_host_ubuntu) do |multi_host_ubuntu|
    multi_host_ubuntu.vm.provision(:shell, path: 'vagrant-setup.sh')
  end

  if ENV['GPDB_REPO']
    config.vm.synced_folder ENV['GPDB_REPO'], "/gpdb"
  else
    config.vm.synced_folder '.', "/gpdb"
  end

  config.vm.provider :virtualbox do |vb|
    vb.name = 'gpdb-ubuntu-dev-host'
  end
end
